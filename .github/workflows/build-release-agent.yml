# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build & Release Agent

on:
  push:
    branches: [ master ]
    tags: ["v*"]
  pull_request:
    branches: [ master ]

defaults:
  run:
    shell: bash

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  NODE_ENV: production

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup Node 16
      uses: actions/setup-node@v1
      with:
        node-version: 16.x
    - name: Setup package build
      run: sudo apt install -yV --no-install-recommends build-essential devscripts lintian
    - run: yarn --frozen-lockfile
    - run: yarn prep
    - id: version
      name: Check & Set VERSION
      run: |
        echo "::set-output name=VERSION::$(<VERSION)"
        grep -v dirty VERSION || { git status ; exit 1 ; }

    - run: yarn binary-build
    - run: yarn deb-build
    - run: yarn docker-build

    - name: Make GitHub & Docker Release
      if: github.event_name == 'push' && contains(github.ref, '/tags/v')
      env:
        TAG: ${{ github.ref }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "$TAG" dist/*
        docker tag $IMAGE_NAME $IMAGE_NAME:prod

    - name: Log in to the Container registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
  
    - run: |
        docker images
        docker push --all-tags $IMAGE_NAME
  
    - name: Upload
      uses: 'actions/upload-artifact@v2'
      with:
          path: dist/*
          name: chromebooks-in-deutschland-${{ steps.version.outputs.VERSION }}


  # release:
  #   needs: [build]
  #   if: github.event_name == 'push' && contains(github.ref, '/tags/v')
  #   name: Upload Release Asset
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0
  #   - uses: actions/download-artifact@v2
  #     with:
  #         path: dist
  #   - run: ls -lR
  #   - run: echo "::set-output name=TAG::${TAG##*/}"
  #     name: Set Tag
  #     id: tag
  #     env:
  #       TAG: ${{ github.ref }}
  #   - run: |
  #       echo "TAG: ${{ steps.tag.outputs.TAG }}"
  #   - name: Create GitHub Release
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       TAG: ${{ steps.tag.outputs.TAG }}
  #     run: |
  #       gh release create "$TAG" dist/*/*


